from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from dispatcher import dp
from main import BotDB
from keyboards.default.Keyboards import main, main_admin, admin_panel
from functions.Functions import check_admin


class User(StatesGroup):
    user_number = State()
    text_of_the_appeal = State()


@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    await message.bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ North Smoke.")
    if not BotDB.user_exists(message.from_user.id):
        await message.bot.send_message(message.from_user.id, "–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å "
                                                             "—É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
                                                             "https://youtu.be/dQw4w9WgXcQ")
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        await User.user_number.set()
    else:
        if check_admin(message.from_user.id):
            await message.answer(f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', reply_markup=main_admin)
        else:
            await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                 reply_markup=main)


@dp.message_handler(state=User.user_number)
async def input_user_number(message: types.Message, state: FSMContext):
    number = message.text
    true_number = ''
    for i in number:
        if i in '0123456789':
            true_number += i
    BotDB.add_user(message.from_user.id, true_number)
    await message.answer(f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {true_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ')
    await state.finish()
    if check_admin(message.from_user.id):
        await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                             reply_markup=main_admin)
    else:
        await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                             reply_markup=main)


@dp.message_handler(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info(message: types.Message):
    await message.bot.send_message(message.from_user.id, text="–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                                                              f"Telegram id: {message.from_user.id}\n"
                                                              f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {BotDB.get_user_phone(message.from_user.id)}")


@dp.message_handler(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤')
async def points(message: types.Message):
    await message.bot.send_message(message.from_user.id,
                                   text=f"–í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {BotDB.get_points(message.from_user.id)}")


@dp.message_handler(text='–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
async def points(message: types.Message):
    if check_admin(message.from_user.id):
        await message.answer(f'–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚úÖ', reply_markup=admin_panel)
    else:
        await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚ùå')


@dp.message_handler(text='–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def create_mailing_list(message: types.Message):
    if check_admin(message.from_user.id):
        await message.answer(f'–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /sendall *–í–∞—à —Ç–µ–∫—Å—Ç*')
    else:
        await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚ùå')


@dp.message_handler(commands='sendall')
async def sendall(message: types.Message):
    if check_admin(message.from_user.id):
        if len(message.text) <= 9:
            await message.answer('–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç')
        else:
            text = message.text[9:]
            users = BotDB.get_users()
            for row in users:
                try:
                    await message.answer(row[0], text)
                except ValueError:
                    await message.answer('–û—à–∏–±–∫–∞ ‚ùå')
            await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ')
    else:
        await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚ùå')


@dp.message_handler(commands="getchatid")
async def cmd_test1(message: types.Message):
    await message.bot.send_message(message.from_user.id, message.chat.id)


@dp.message_handler(text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def forward_message(message: types.Message):
    await message.answer('–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É', reply_markup=types.ReplyKeyboardRemove())
    await User.text_of_the_appeal.set()


@dp.message_handler(state=User.text_of_the_appeal)
async def send_forward_message(message: types.Message, state: FSMContext):
    await message.bot.send_message(-995941442, 'üì´ | –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ')
    await message.bot.forward_message(-995941442, message.from_user.id, message.message_id)
    await message.bot.send_message(-995941442,
                                   f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}: {message.from_user.id}')
    await state.finish()
    # await message.answer('üì® | –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')

    if check_admin(message.from_user.id):
        await message.answer('üì® | –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', reply_markup=main_admin)
    else:
        await message.answer('üì® | –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', reply_markup=main)


@dp.message_handler(commands='responsetouser')
async def response_to_user(message: types.Message):
    temp = message.text.split()
    text = ' '.join(temp[2:])
    await message.bot.send_message(temp[1], 'üì´ | –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n'
                                            '–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n'
                                            '\n'
                                            f'<code>{text}</code>')


@dp.message_handler(text='–û—Ç–º–µ–Ω–∞')
async def cancel(message: types.Message):
    if check_admin(message.from_user.id):
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=main_admin)
    else:
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=main)


@dp.message_handler()
async def pass_func(message: types.Message):
    if check_admin(message.from_user.id):
        await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚ùå', reply_markup=main_admin)
    else:
        await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚ùå', reply_markup=main)
